{"version":3,"sources":["components/Header.js","components/Nav.js","components/Container.js","components/Row.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Nav","props","components_Header","id","href","currentScore","highScore","Container","children","Row","Card","Object","assign","src","alt","index","App","state","imgArray","Images","guessedArray","correct","handleHover","e","preventDefault","handleClick","target","attributes","value","scoreDisplay","document","querySelector","highScoreDisplay","navBar","_this","includes","setState","shuffle","classList","add","toggle","concat","toConsumableArray","console","log","addEventListener","classes","this","contains","remove","array","newArray","i","length","j","Math","floor","random","_ref","_this2","Fragment","components_Nav","components_Container","components_Row","map","x","components_Card","onClick","onMouseOver","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50ff20f6.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Header.css\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"jumbotron-fluid m-0 p-1\">\r\n            <h1 className=\"h4 text-center\">Welcome to the Clicky Memory Game!</h1>\r\n            <p className= \"h4 text-center\">Try to click all the images without selecting a duplicate!</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport \"./Nav.css\";\r\nimport Header from \"./Header\"\r\n\r\nfunction Nav(props) {\r\n    return (\r\n        <div className=\"navWrapper\">\r\n        <Header/>\r\n            <nav className=\"navbar navbar-success flex-row justify-content-center d-flex\">\r\n                <p id=\"score\" className=\"nav-item m-2 d-flex h4 \" href=\"#\" >Current Score: {props.currentScore}</p>\r\n                <p id=\"highScore\" className=\"nav-item m-2 d-flex h4 \" href=\"#\">High Score: {props.highScore}</p>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport \"./Container.css\";\r\n\r\n\r\nfunction Container(props) {\r\n    return (\r\n        <div className=\"container w-75\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Container;","import React from 'react';\r\n\r\nfunction Row(props) {\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;","import React from 'react';\r\nimport './Card.css'\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div className=\" col-xl-2 col-lg-3 col-md-4 col-sm-6 col-12 text-center p-1\">\r\n            <img className=\" .img-fluid memory-pic text-center\"\r\n            src={props.src}\r\n            alt=\"random_image\"\r\n            index={props.index}\r\n            {...props}  />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\nimport Nav from \"./components/Nav\";\nimport Header from \"./components/Header\";\nimport Container from \"./components/Container\";\nimport Row from \"./components/Row\";\nimport Card from \"./components/Card\";\nimport './App.css';\nimport Images from \"./components/img.json\"\n\n\nclass App extends React.Component {\n\n  state = {\n    imgArray: Images,\n    guessedArray: [],\n    correct: 0,\n    highScore: 0\n\n  };\n\n  handleHover = (e) => {\n    e.preventDefault();\n\n  }\n\n  componentDidMount() {\n\n    console.log(\"Mounted\")\n\n    let scoreDisplay = document.querySelector(\"#score\");\n    let highScoreDisplay = document.querySelector(\"#highScore\");\n    let navBar = document.querySelector(\".navbar\");\n\n    scoreDisplay.addEventListener(\"animationend\", function () {\n      let classes = this.classList;\n\n      if (classes.contains(\"correct-guess\")) {\n        this.classList.remove(\"correct-guess\");\n      }\n      else if (classes.contains(\"incorrect-guess\")) {\n        this.classList.remove(\"incorrect-guess\");\n      }\n    });\n\n    highScoreDisplay.addEventListener(\"animationend\", function () {\n      let classes = this.classList;\n\n      if (classes.contains(\"correct-guess\")) {\n        this.classList.remove(\"correct-guess\");\n      }\n      else if (classes.contains(\"incorrect-guess\")) {\n        this.classList.remove(\"incorrect-guess\");\n      }\n    });\n\n    navBar.addEventListener(\"animationend\", function() {\n      \n      if ( this.classList.contains(\"nav-incorrect-guess\") ) {\n        this.classList.toggle(\"nav-incorrect-guess\");\n      }\n    })\n\n\n\n  }\n\n  handleClick = (e) => {\n    e.preventDefault();\n\n    let index = e.target.attributes.index.value;\n    let scoreDisplay = document.querySelector(\"#score\");\n    let highScoreDisplay = document.querySelector(\"#highScore\");\n    let navBar = document.querySelector(\".navbar\");\n\n    if (!this.state.guessedArray.includes(index)) {\n\n      if (this.state.correct === this.state.highScore) {\n        this.setState(\n          {\n            correct: this.state.correct + 1,\n            highScore: this.state.highScore + 1,\n            guessedArray: [...this.state.guessedArray, index],\n            imgArray: this.shuffle(this.state.imgArray)\n          }\n        );\n        \n        scoreDisplay.classList.add(\"correct-guess\");\n        highScoreDisplay.classList.add(\"correct-guess\");\n\n      }\n      else {\n        this.setState(\n          {\n            correct: this.state.correct + 1,\n            guessedArray: [...this.state.guessedArray, index],\n            imgArray: this.shuffle(this.state.imgArray)\n          }\n        );\n\n        scoreDisplay.classList.add(\"correct-guess\");\n      }\n    }\n    else {\n      this.setState({\n        correct: 0,\n        guessedArray: [],\n        imgArray: this.shuffle(this.state.imgArray)\n      });\n\n      scoreDisplay.classList.add(\"incorrect-guess\");\n      highScoreDisplay.classList.add(\"incorrect-guess\");\n      navBar.classList.toggle(\"nav-incorrect-guess\");\n\n    }\n  }\n\n  shuffle(array) {\n    let newArray = array;\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n    }\n\n    return newArray;\n  }\n\n\n  render() {\n\n    return (\n      <>\n        <Nav\n          highScore={this.state.highScore}\n          currentScore={this.state.correct}\n        />\n        <Container>\n          <Row>\n            {this.state.imgArray.map(x =>\n              <Card\n                index={x.id}\n                src={x.src}\n                onClick={(e) => this.handleClick(e)}\n                onMouseOver={(e) => this.handleHover(e)}\n              />)\n            }\n          </Row>\n        </Container>\n      </>\n    )\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}